/**
 * Module dependencies
 */

var request = require('co-request');
var compose = require('koa-compose');
var exec = require('co-exec');
var fs = require('fs');

var ImageMethods = require('./methods');
var Preset = require('./preset');

var util = require('./util');
var convert = util.convert;
var extend = util.extend;


/**
 * Module exports
 */

module.exports = Image;


/**
 * Main class
 */

function Image (path) {
	this.path = path;
	this.config = {};
	this.args = {};
	this.filters = [];

	var parts = path.split('/');
	var lastIndex = parts.length > 0 ? parts.length - 1 : 0;
	this.name = parts[lastIndex];

	extend(this, ImageMethods);
};

Image.prototype.tmpPath = function () {
	var currentExtension = /\.[a-z]+$/i.exec(this.path)[0].replace('.', '');
	var extension = this.config.format || currentExtension;
	var filename = Math.random().toString(36).substring(7);

	return '/tmp/' + filename + '.' + extension;
};

Image.prototype.use = function (name) {
	var middleware;

	// if string is passed
	// assume that it's a preset name
	if (typeof name === 'string') {
		middleware = Image.presets[name];
	} else {
		middleware = name;
	}

	// if preset is not found
	// or argument is not a function
	if (!middleware) {
		throw new Error('Preset with name "' + name + '" does not exist.');
	}

	if (middleware instanceof Preset) {
		var preset = middleware;
		extend(this.config, preset.config);
		extend(this.args, preset.args);
	} else if (middleware instanceof Function) {
		var filter = middleware.bind(this);
		this.filters.push(filter);
	}

	return this;
};

Image.prototype.download = function *() {
	var sourcePath = this.path;
	
	// if source path is not a URL
	if (!/^http/.test(sourcePath)) return;
	
	var res = yield request(sourcePath);
	
	// replace source URL with a path
	sourcePath = this.path = this.tmpPath();
	yield fs.writeFile(sourcePath, res.body);
};

Image.prototype.save = function *(destPath) {
	// download an image if source path is a URL
	yield this.download;
	
	// run middleware
	yield compose(this.filters);
	
	var sourcePath;

	sourcePath = this.path;
	destPath = destPath || this.tmpPath();

	var args = [sourcePath];
	for (var key in this.args) {
		var value = this.args[key];
		
		args.push(key + ' ' + value);
	}

	args.push(destPath);

	// convert an image using ImageMagick
	yield convert(args);
	
	// wrap resulting image in an Image class
	return new Image(destPath);
};

Image.prototype.meta = function *() {
	return yield Image.identify(this);
};

Image.presets = {};
Image.preset = function (name) {
	return new Preset(name);
};

Image.convert = util.convert;
Image.identify = util.identify;